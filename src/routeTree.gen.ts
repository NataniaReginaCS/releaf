/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ViewImport } from './routes/view'
import { Route as UploadImport } from './routes/upload'
import { Route as TermImport } from './routes/term'
import { Route as ProductImport } from './routes/product'
import { Route as MarketplaceImport } from './routes/marketplace'
import { Route as LearnImport } from './routes/learn'
import { Route as ForumdetailImport } from './routes/forum_detail'
import { Route as ForumImport } from './routes/forum'
import { Route as DonationImport } from './routes/donation'
import { Route as CommunityImport } from './routes/community'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ViewRoute = ViewImport.update({
  id: '/view',
  path: '/view',
  getParentRoute: () => rootRoute,
} as any)

const UploadRoute = UploadImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRoute,
} as any)

const TermRoute = TermImport.update({
  id: '/term',
  path: '/term',
  getParentRoute: () => rootRoute,
} as any)

const ProductRoute = ProductImport.update({
  id: '/product',
  path: '/product',
  getParentRoute: () => rootRoute,
} as any)

const MarketplaceRoute = MarketplaceImport.update({
  id: '/marketplace',
  path: '/marketplace',
  getParentRoute: () => rootRoute,
} as any)

const LearnRoute = LearnImport.update({
  id: '/learn',
  path: '/learn',
  getParentRoute: () => rootRoute,
} as any)

const ForumdetailRoute = ForumdetailImport.update({
  id: '/forum_detail',
  path: '/forum_detail',
  getParentRoute: () => rootRoute,
} as any)

const ForumRoute = ForumImport.update({
  id: '/forum',
  path: '/forum',
  getParentRoute: () => rootRoute,
} as any)

const DonationRoute = DonationImport.update({
  id: '/donation',
  path: '/donation',
  getParentRoute: () => rootRoute,
} as any)

const CommunityRoute = CommunityImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/community': {
      id: '/community'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityImport
      parentRoute: typeof rootRoute
    }
    '/donation': {
      id: '/donation'
      path: '/donation'
      fullPath: '/donation'
      preLoaderRoute: typeof DonationImport
      parentRoute: typeof rootRoute
    }
    '/forum': {
      id: '/forum'
      path: '/forum'
      fullPath: '/forum'
      preLoaderRoute: typeof ForumImport
      parentRoute: typeof rootRoute
    }
    '/forum_detail': {
      id: '/forum_detail'
      path: '/forum_detail'
      fullPath: '/forum_detail'
      preLoaderRoute: typeof ForumdetailImport
      parentRoute: typeof rootRoute
    }
    '/learn': {
      id: '/learn'
      path: '/learn'
      fullPath: '/learn'
      preLoaderRoute: typeof LearnImport
      parentRoute: typeof rootRoute
    }
    '/marketplace': {
      id: '/marketplace'
      path: '/marketplace'
      fullPath: '/marketplace'
      preLoaderRoute: typeof MarketplaceImport
      parentRoute: typeof rootRoute
    }
    '/product': {
      id: '/product'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductImport
      parentRoute: typeof rootRoute
    }
    '/term': {
      id: '/term'
      path: '/term'
      fullPath: '/term'
      preLoaderRoute: typeof TermImport
      parentRoute: typeof rootRoute
    }
    '/upload': {
      id: '/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadImport
      parentRoute: typeof rootRoute
    }
    '/view': {
      id: '/view'
      path: '/view'
      fullPath: '/view'
      preLoaderRoute: typeof ViewImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/community': typeof CommunityRoute
  '/donation': typeof DonationRoute
  '/forum': typeof ForumRoute
  '/forum_detail': typeof ForumdetailRoute
  '/learn': typeof LearnRoute
  '/marketplace': typeof MarketplaceRoute
  '/product': typeof ProductRoute
  '/term': typeof TermRoute
  '/upload': typeof UploadRoute
  '/view': typeof ViewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/community': typeof CommunityRoute
  '/donation': typeof DonationRoute
  '/forum': typeof ForumRoute
  '/forum_detail': typeof ForumdetailRoute
  '/learn': typeof LearnRoute
  '/marketplace': typeof MarketplaceRoute
  '/product': typeof ProductRoute
  '/term': typeof TermRoute
  '/upload': typeof UploadRoute
  '/view': typeof ViewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/community': typeof CommunityRoute
  '/donation': typeof DonationRoute
  '/forum': typeof ForumRoute
  '/forum_detail': typeof ForumdetailRoute
  '/learn': typeof LearnRoute
  '/marketplace': typeof MarketplaceRoute
  '/product': typeof ProductRoute
  '/term': typeof TermRoute
  '/upload': typeof UploadRoute
  '/view': typeof ViewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/community'
    | '/donation'
    | '/forum'
    | '/forum_detail'
    | '/learn'
    | '/marketplace'
    | '/product'
    | '/term'
    | '/upload'
    | '/view'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/community'
    | '/donation'
    | '/forum'
    | '/forum_detail'
    | '/learn'
    | '/marketplace'
    | '/product'
    | '/term'
    | '/upload'
    | '/view'
  id:
    | '__root__'
    | '/'
    | '/community'
    | '/donation'
    | '/forum'
    | '/forum_detail'
    | '/learn'
    | '/marketplace'
    | '/product'
    | '/term'
    | '/upload'
    | '/view'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CommunityRoute: typeof CommunityRoute
  DonationRoute: typeof DonationRoute
  ForumRoute: typeof ForumRoute
  ForumdetailRoute: typeof ForumdetailRoute
  LearnRoute: typeof LearnRoute
  MarketplaceRoute: typeof MarketplaceRoute
  ProductRoute: typeof ProductRoute
  TermRoute: typeof TermRoute
  UploadRoute: typeof UploadRoute
  ViewRoute: typeof ViewRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommunityRoute: CommunityRoute,
  DonationRoute: DonationRoute,
  ForumRoute: ForumRoute,
  ForumdetailRoute: ForumdetailRoute,
  LearnRoute: LearnRoute,
  MarketplaceRoute: MarketplaceRoute,
  ProductRoute: ProductRoute,
  TermRoute: TermRoute,
  UploadRoute: UploadRoute,
  ViewRoute: ViewRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/community",
        "/donation",
        "/forum",
        "/forum_detail",
        "/learn",
        "/marketplace",
        "/product",
        "/term",
        "/upload",
        "/view"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/community": {
      "filePath": "community.tsx"
    },
    "/donation": {
      "filePath": "donation.tsx"
    },
    "/forum": {
      "filePath": "forum.tsx"
    },
    "/forum_detail": {
      "filePath": "forum_detail.tsx"
    },
    "/learn": {
      "filePath": "learn.tsx"
    },
    "/marketplace": {
      "filePath": "marketplace.tsx"
    },
    "/product": {
      "filePath": "product.tsx"
    },
    "/term": {
      "filePath": "term.tsx"
    },
    "/upload": {
      "filePath": "upload.tsx"
    },
    "/view": {
      "filePath": "view.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
